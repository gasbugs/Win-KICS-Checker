# W-18: IIS DB Connection Vulnerability Check
# Checks for vulnerabilities related to .asa/.asax mappings and request filtering in IIS.

$ErrorActionPreference = 'Stop'

$result = @{
    CheckItem = 'W-18'
    Category = 'Service Management'
    Result = 'Good'
    Details = 'No IIS DB connection vulnerabilities found, or IIS is not installed.'
    Timestamp = (Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
    VulnerableWebsites = @()
}

try {
    # Check if the WebAdministration module is available (indicates IIS is likely installed)
    if (-not (Get-Module -ListAvailable -Name WebAdministration)) {
        $result.Details = "IIS Web Server is not detected or the WebAdministration PowerShell module is not available. This check is not applicable."
        # Result remains 'Good'
    } else {
        Import-Module WebAdministration -ErrorAction Stop

        $vulnerableSites = @()
        $websites = Get-WebSite -ErrorAction SilentlyContinue

        if ($null -eq $websites) {
            $result.Details = "IIS is installed, but no websites were found."
        } else {
            foreach ($site in $websites) {
                $siteIsVulnerable = $false
                $siteVulnerabilityDetails = @()

                # 1. Check for .asa / .asax script mappings
                $hasAsaAsaxMapping = $false
                try {
                    $asaAsaxHandlers = Get-WebConfigurationProperty -PSPath "IIS:\Sites\$($site.Name)" -Filter "system.webServer/handlers/add" -Name "*" | Where-Object { $_.path -like "*.asa" -or $_.path -like "*.asax" }
                    if ($asaAsaxHandlers.Count -gt 0) {
                        $hasAsaAsaxMapping = $true
                    }
                } catch { }

                # 2. Check .asa / .asax file filtering
                $asaAsaxFilteringEnabled = $false
                try {
                    $requestFilteringConfig = Get-WebConfigurationProperty -PSPath "IIS:\Sites\$($site.Name)" -Filter "system.webServer/security/requestFiltering/fileExtensions/add" -Name "*" -ErrorAction SilentlyContinue
                    if ($requestFilteringConfig) {
                        $asaAsaxFiltering = $requestFilteringConfig | Where-Object { ($_.fileExtension -eq "asa" -or $_.fileExtension -eq "asax") -and $_.allowed -eq $true }
                        if ($asaAsaxFiltering.Count -gt 0) {
                            $asaAsaxFilteringEnabled = $true
                        }
                    }
                } catch { }

                # Vulnerable if BOTH conditions are met
                if ($hasAsaAsaxMapping -and $asaAsaxFilteringEnabled) {
                    $siteIsVulnerable = $true
                    $siteVulnerabilityDetails += "Has .asa/.asax handler mappings and request filtering is enabled for these extensions."
                }

                if ($siteIsVulnerable) {
                    $vulnerableSites += "$($site.Name) ($($siteVulnerabilityDetails -join ', '))"
                }
            }

            if ($vulnerableSites.Count -gt 0) {
                $result.Result = 'Vulnerable'
                $result.Details = "IIS DB connection vulnerabilities found on the following websites: $($vulnerableSites -join '; '). This may expose sensitive information."
                $result.VulnerableWebsites = $vulnerableSites
            } else {
                $result.Details = "No IIS DB connection vulnerabilities found on any detected websites."
            }
        }
    }

} catch {
    $result.Result = 'Error'
    $result.Details = "An error occurred while checking IIS DB connection vulnerabilities: $($_.Exception.Message)"
}

# Remove the temporary list from the final output if not vulnerable
if ($result.Result -ne 'Vulnerable') {
    $result.Remove('VulnerableWebsites')
}

$result | ConvertTo-Json -Compress
